input {
    stdin { }
}

filter {
    grok {
        match => ["message", "%{SYSLOGBASE:syslogbase} %{GREEDYDATA:json_event}"]
        tag_on_failure => "_sysloggrokparsefailure"
    }
    if "_sysloggrokparsefailure" in [tags] {
        mutate {
            rename => ["message", "json_event"]
            remove_tag => ["_sysloggrokparsefailure"]
        }
    }
    else {
        mutate {
            rename => ["timestamp", "syslog_timestamp"]
        }
    }
    json {
        source => "json_event"
        remove_field => ["message", "json_event"]
    }
    grok {
        match => ["[context][course_id]", "(?<university>[^/+]+)/(?<course_number>[^/+]+)/(?<course_run>[^/]+)"]
    }
    date {
        match => [ "time", "YYYY-MM-dd'T'HH:mm:ss.SSSSSSZ" ]
        timezone => "Europe/Paris"
        add_field => {
             "hour_of_day" => "%{+HH}"
        }
    }
    mutate {
        convert => ["hour_of_day", "integer"]
        convert => ["[context][user_id]", "string"]
    }
    if [event_name] == "problem_graded" {
        mutate {
            rename => ["event", "event_problem_graded"]
        }
    }
    if [event_type] in ["problem_check", "save_problem_success"] {
        mutate {
            remove_field => [
                "[event][answer]",
                "[event][answers]",
                "[event][correct_map]",
                "[event][submission]"
            ]
        }
        if "state" in [event] {
            mutate {
                remove_field => [
                    "[event][state][correct_map]",
                    "[event][state][input_state]",
                    "[event][state][student_answers]"
                ]
            }
        }
    }
    geoip {
        source => "ip"
    }
}

output {
    #stdout { codec => rubydebug }
    stdout { codec => dots }
    elasticsearch   {
        protocol => "http"
        host => "localhost"
        index => "logstash-trackinglogs-%{+YYYY.MM.dd}"
    }
}
